load("@pip_deps2//:requirements.bzl", "all_data_requirements", "all_requirements", "all_whl_requirements", "requirement")
load("@pybind11_bazel//:build_defs.bzl", "pybind_extension", "pybind_library", "pybind_library_test")
load("@rules_python//python:defs.bzl", "py_test")
load("@rules_python//python:packaging.bzl", "py_package", "py_wheel")

platform(
    name = "my_target_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

filegroup(
    name = "_basic",
    srcs = [
        "basic.pyi",
        #        "tools.py",
    ],
)

# 定义 config_setting 用于平台检测
config_setting(
    name = "is_windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

config_setting(
    name = "is_linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "is_macos",
    constraint_values = [
        "@platforms//os:macos",
    ],
)

pybind_extension(
    name = "basic",
    srcs = [
        "pybind_numpy.cpp",
        "pybind_custom_smart_pointer.cpp",
        "pybind_exception.cpp",
        "pybind_smart_pointers.cpp",
        "pybind_numpy.h",
        "pybind_python.cpp",
        #        ":_basic",
    ],
    copts = select({
        ":is_windows": [
            "/O",  # Windows MSVC 优化
        ],
        ":is_linux": [
            "-O0",  # Linux GCC/Clang 优化
        ],
        ":is_macos": [
            "-O0",  # macOS Clang 优化
        ],
        "//conditions:default": [],
    }),

    #    copts = [
    #        "-g",
    #        #        "--strip=never",
    #        "-O0",
    #    ],  # 确保调试符号，禁用优化
)

py_library(
    name = "basic_lib",
    srcs = ["tools.py"],
    data = [
        ":basic",
    ],
    imports = ["."],
    deps = [
        #        "@pip_deps2//numpy",
        requirement("numpy"),
    ],
)

py_test(
    name = "python_basic_test",
    srcs = ["python_basic_test.py"],
    deps = [":basic_lib"],
)

py_test(
    name = "python_basic_test2",
    srcs = ["python_basic_test2.py"],
    deps = [":basic_lib"],
)

alias(
    name = "python_basic_test2_alias",
    actual = ":python_basic_test2",
)

cc_binary(
    name = "custom_smart_ptr",
    srcs = ["CustomSmartPtr.cpp"],
    deps = [],
)

alias(
    name = "custom_smart_ptr_alias",
    actual = ":custom_smart_ptr",
)
