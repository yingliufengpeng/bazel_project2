###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to BUILD.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "googletest", version = "1.15.2")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.8.1")
bazel_dep(name = "container_structure_test", version = "1.16.0")
bazel_dep(name = "rules_jvm_external", version = "5.3")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_java", version = "8.11.0")

# File: MODULE.bazel
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "platforms", version = "0.0.10")

# Configure Python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.12",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    #    name = "pip_deps",
    hub_name = "pip_deps2",
    python_version = "3.12",
    requirements_lock = "//:requirements_lock_3_12.txt",
)
use_repo(pip, "pip_deps2")

bazel_dep(name = "glog", version = "0.5.0", repo_name = "com_github_google_glog")

# Override glog to a fork version with archive_override.
archive_override(
    module_name = "glog",
    integrity = "sha256-EH4o3n+qkfcsEFODkkRzs1/XAH9ej2V77gv05eplB5k=",
    strip_prefix = "glog-9401faa19e0424791243827b8e95efd3d0d8db23",
    urls = ["https://github.com/meteorcloudy/glog/archive/9401faa19e0424791243827b8e95efd3d0d8db23.tar.gz"],
)

# Override gflag to a fork version with git_override.
# gflag is still an indirect dependency, the override itself doesn't give the root module visibility on gflags.
git_override(
    module_name = "gflags",
    commit = "95995169e86f3fedd19696df5b1811d441c462a2",
    remote = "https://github.com/meteorcloudy/gflags.git",
)

# Patch bazel skylib 1.7.1 with a local patch file.
bazel_dep(name = "bazel_skylib", version = "1.7.1")
single_version_override(
    module_name = "bazel_skylib",
    patch_strip = 1,
    patches = ["//override_bazel_module_demo:bazel_skylib.patch"],
    version = "1.7.1",
)

# Depend on module lib_a at a local path.
# The bazel_dep statement is necessary because the root module must have visibility on override_bazel_module_demo.
#bazel_dep(name = "override_bazel_module_demo", version = "0.0.1")
#local_path_override(
#    module_name = "override_bazel_module_demo",
#    path = "./override_bazel_module_demo",
#)

bazel_dep(name = "lib_a", version = "0.0.1")
local_path_override(
    module_name = "lib_a",
    path = "./extern_repo/lib_a",
)

# MODULE.bazel

# 使用我们定义的模块扩展
my_ext = use_extension("//module_extension:extensions.bzl", "my_extension")

# 为扩展添加标签(tags)
my_ext.dep(name = "guava")
my_ext.dev(name = "guava_dev")
my_ext.dep(
    name = "gson",
    version = "2.8.10",
)
use_repo(my_ext, "myrepo")  # 这会让所有生成的仓库对模块可用

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "junit:junit:4.12",
        "com.google.guava:guava:28.0-jre",
    ],
    fetch_sources = True,
    repositories = [
        "https://maven.aliyun.com/repository/public",
        "http://uk.maven.org/maven2",
        "https://jcenter.bintray.com/",
    ],
)
use_repo(maven, "maven")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_java",
    digest = "sha256:161a1d97d592b3f1919801578c3a47c8e932071168a96267698f4b669c24c76d",
    image = "gcr.io/distroless/java17",
)
use_repo(oci, "distroless_java")

my_extension = use_extension("//repo_rule_demo:my_extension.bzl", "my_extension")
my_extension.lib(
    sha256 = "abc123...",
    url = "https://github.com/google/googletest/releases/download/v1.17.0/googletest-1.17.0.tar.gz",
    version = "1.0.0",
)
use_repo(my_extension, "my_external_lib_1_0_0")
